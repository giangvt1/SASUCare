/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package controller.ChatController;

/**
 *
 * @author ngoch
 */
import org.json.JSONObject;
import jakarta.servlet.http.HttpSession;
import jakarta.websocket.*;
import jakarta.websocket.server.ServerEndpoint;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

@ServerEndpoint(value = "/chat", configurator = ChatConfigurator.class)
public class ChatEndpoint {

    private static final Set<Session> clients = Collections.synchronizedSet(new HashSet<>());
    private static final Map<Session, String> userRoles = Collections.synchronizedMap(new HashMap<>()); // L∆∞u role c·ªßa session
    private static final Map<Session, Session> chatPairs = Collections.synchronizedMap(new HashMap<>()); // Gh√©p user v·ªõi staff

    @OnOpen
    public void onOpen(Session session, EndpointConfig config) {
        HttpSession httpSession = (HttpSession) config.getUserProperties().get("httpSession");
        if (httpSession != null) {
            String role = (String) httpSession.getAttribute("userRoles");  
            System.out.println("üîπ HttpSession found, role: " + role);

            if ("HR".equals(role)) {
                userRoles.put(session, "HR");
                System.out.println("üîµ HR Staff connected: " + session.getId());
            } else {
                userRoles.put(session, "guest");
                System.out.println("üü¢ Guest connected: " + session.getId());
            }
        } else {
            userRoles.put(session, "guest");
            System.out.println("‚ö™ No HttpSession found, set as guest: " + session.getId());
        }
        clients.add(session);
        assignChat(session);
    }


    @OnMessage
    public void onMessage(String message, Session senderSession) {
        if (message.trim().startsWith("{") && message.trim().endsWith("}")) {
            JSONObject json = new JSONObject(message);
            if ("setRole".equals(json.optString("action"))) {
                String role = json.optString("role");
                userRoles.put(senderSession, role);
                System.out.println("üÜî C·∫≠p nh·∫≠t role: " + role + " cho session " + senderSession.getId());
                return;
            }
        } 

        // G·ª≠i tin nh·∫Øn ƒë·∫øn ng∆∞·ªùi ƒë·ªëi di·ªán trong c·∫∑p chat
        Session receiverSession = chatPairs.get(senderSession);
        if (receiverSession != null && receiverSession.isOpen()) {
            sendMessageToUser(receiverSession, message);
        } else {
            sendMessageToUser(senderSession, "‚ö†Ô∏è Kh√¥ng c√≥ ng∆∞·ªùi nh·∫≠n tin nh·∫Øn.");
        }
    }


    @OnClose
    public void onClose(Session session) {
        clients.remove(session);
        userRoles.remove(session);

        // N·∫øu session n√†y ƒëang trong m·ªôt c·∫∑p chat
        Session pairedSession = chatPairs.remove(session);
        if (pairedSession != null) {
            chatPairs.remove(pairedSession); // X√≥a lu√¥n ph√≠a c√≤n l·∫°i
            sendMessageToUser(pairedSession, "‚ö†Ô∏è HR ƒë√£ ng·∫Øt k·∫øt n·ªëi. ƒêang t√¨m HR kh√°c...");
            assignChat(pairedSession); // T√¨m HR kh√°c cho user n√†y
        }

        System.out.println("üî¥ Session closed: " + session.getId());
    }


    @OnError
    public void onError(Session session, Throwable throwable) {
        System.err.println("WebSocket Error: " + throwable.getMessage());
    }
    
    private void assignChat(Session userSession) {
    String role = userRoles.getOrDefault(userSession, "guest");

    // N·∫øu l√† guest v√† ch∆∞a c√≥ c·∫∑p
    if ("guest".equals(role) && !chatPairs.containsKey(userSession)) {
        for (Session staffSession : clients) {
            if ("HR".equals(userRoles.get(staffSession)) && !chatPairs.containsKey(staffSession) && staffSession.isOpen()) {
                // Gh√©p ƒë√¥i guest v·ªõi HR
                chatPairs.put(userSession, staffSession);
                chatPairs.put(staffSession, userSession);

                // G·ª≠i th√¥ng b√°o
                sendMessageToUser(userSession, "‚úÖ B·∫°n ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi v·ªõi m·ªôt HR.");
                sendMessageToUser(staffSession, "üì¢ M·ªôt kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c g√°n cho b·∫°n.");

                return; // Tho√°t kh·ªèi v√≤ng l·∫∑p khi ƒë√£ gh√©p th√†nh c√¥ng
            }
        }

        // N·∫øu kh√¥ng t√¨m th·∫•y HR n√†o r·∫£nh
        sendMessageToUser(userSession, "‚è≥ Kh√¥ng c√≥ HR n√†o s·∫µn s√†ng. Vui l√≤ng ƒë·ª£i...");
    }
}

    
    private void sendMessageToUser(Session session, String message) {
        try {
            session.getBasicRemote().sendText(message);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}
